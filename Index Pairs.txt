Index Pairs EXECUTABLE

import java.util.*;

class TrieNode {
    TrieNode[] arr;
    boolean isEnd;

    TrieNode() {
        arr = new TrieNode[26];
        isEnd = false;
    }
}

class lab1i {
    public int[][] IndexPairs(String text, String[] words) {
        TrieNode root = new TrieNode();
        for (String s : words) {
            TrieNode node = root;
            for (int i = 0; i < s.length(); i++) {
                char ch = s.charAt(i);
                if (node.arr[ch - 'a'] == null) {
                    node.arr[ch - 'a'] = new TrieNode();
                }
                node = node.arr[ch - 'a'];
            }
            node.isEnd = true;
        }

        int len = text.length();
        List<int[]> l = new ArrayList<>();
        for (int i = 0; i < len; i++) {
            int j = i;
            TrieNode node = root;
            char ch = text.charAt(i);
            while (node.arr[ch - 'a'] != null) {
                node = node.arr[ch - 'a'];
                if (node.isEnd) {
                    l.add(new int[]{i, j});
                }
                j++;
                if (j == len) break;
                else {
                    ch = text.charAt(j);
                }
            }
        }

        int size = l.size();
        int[][] res = new int[size][2];
        for (int i = 0; i < size; i++) {
            res[i] = l.get(i);
        }

        return res;
    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        String text = s.nextLine();
        String[] words = s.nextLine().split(" ");
        int[][] ans = new lab1i().IndexPairs(text, words);
        for (int[] a : ans) {
            System.out.println(a[0] + " " + a[1]);
        }
        s.close();
    }
}