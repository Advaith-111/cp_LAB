import java.util.*;

public class SegmentTree {
    public static int createTree(int[] st, int si, int[] a, int l, int r) {
        if (l == r) {
            st[si] = a[l];
            return st[si];
        } else {
            int mid = (l + r) / 2;
            st[si] = createTree(st, 2 * si + 1, a, l, mid) + createTree(st, 2 * si + 2, a, mid + 1, r);
            return st[si];
        }
    }

    public static void update(int[] st, int si, int sl, int sr, int pos, int diff) {
        if (sl > pos || sr < pos) {
            return;
        }
        st[si] += diff;
        if (sl != sr) {
            int mid = (sl + sr) / 2;
            update(st, 2 * si + 1, sl, mid, pos, diff);
            update(st, 2 * si + 2, mid + 1, sr, pos, diff);
        }
    }

    public static int rangeSum(int[] st, int si, int sl, int sr, int l, int r) {
        if (l <= sl && r >= sr)
            return st[si];
        if (l > sr || r < sl)
            return 0;
        int mid = (l + r) / 2;
        return rangeSum(st, 2 * si + 1, sl, mid, l, r) + rangeSum(st, 2 * si + 2, mid + 1, sr, l, r);
    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        System.out.println("enter size: ");
        int n = s.nextInt();
        int[] arr = new int[n];
        System.out.println("enter values in array : ");
        for (int i = 0; i < arr.length; i++) {
            arr[i] = s.nextInt();
        }

        // Build segment tree
        int[] segmentTree = new int[4 * n]; // Considering a complete binary tree
        createTree(segmentTree, 0, arr, 0, n - 1);

        // Test update function
        update(segmentTree, 0, 0, n - 1, 3, 10); // Update index 3 with value 10

        // Test range sum function
        int sum = rangeSum(segmentTree, 0, 0, n - 1, 2, 5); // Sum of elements from index 2 to 5
        System.out.println("Sum from index 2 to 5: " + sum);
        s.close();
    }
}
