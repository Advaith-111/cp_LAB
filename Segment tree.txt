import java.util.*;

class Segment {
    static int create(int st[], int si, int a[], int l, int r) {
        if (l == r) {
            st[si] = a[l];
            return st[si];
        } else {
            int mid = (l + r) / 2;
            st[si] = create(st, 2 * si + 1, a, l, mid) + create(st, 2 * si + 2, a, mid + 1, r);
            return st[si];
        }
    }

    static void update(int st[], int si, int sl, int sr, int pos, int diff) {
        if (pos < sl || pos > sr)
            return;

        st[si] += diff;
        if (sl != sr) {
            int mid = (sl + sr) / 2;
            update(st, 2 * si + 1, sl, mid, pos, diff);
            update(st, 2 * si + 2, mid + 1, sr, pos, diff);
        }
    }

    static int sum(int st[], int si, int sl, int sr, int l, int r) {
        if (l > sr || r < sl) {
            return 0;
        }
        if (l <= sl && r >= sr) {
            return st[si];
        }
        int mid = (sl + sr) / 2;
        return sum(st, 2 * si + 1, sl, mid, l, r) + sum(st, 2 * si + 2, mid + 1, sr, l, r);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[] = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        
        // Segment segmentTree = new Segment();
        int x = (int)(Math.ceil(Math.log(n) / Math.log(2)));
        int size = 2 * (int)(Math.pow(2, x)) - 1;
        int st[] = new int[size];
        create(st, 0, a, 0, n - 1);

        int l = sc.nextInt();
        int r = sc.nextInt();
        System.out.println(sum(st, 0, 0, n - 1, l, r));
        
        sc.close();
    }
}
