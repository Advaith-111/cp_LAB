import java.util.*;

public class KthLargest {
    static int K;

    public static Tnode LeftRotation(Tnode root) {
        Tnode r = root.right;
        Tnode x = root.right.left;
        r.left = root;
        root.right = x;
        return r;
    }

    public static Tnode RightRotation(Tnode root) {
        Tnode l = root.left;
        Tnode x = root.left.right;
        l.right = root;
        root.left = x;
        return l;
    }

    public static Tnode InsertNode(Tnode root, int key) {
        if (root == null)
            return new Tnode(key);
        if (key < root.key) {
            root.left = InsertNode(root.left, key);
            if (root.left != null && root.left.priority > root.priority) {
                root = RightRotation(root);
            }
        } else {
            root.right = InsertNode(root.right, key);
            if (root.right != null && root.right.priority > root.priority) {
                root = LeftRotation(root);
            }
        }
        return root;
    }

    public static void Inorder(Tnode root) {
        if (root != null) {
            Inorder(root.left);
            K--;
            if (K == 0) {
                System.out.println(root.key + " " + root.priority);
            }
            Inorder(root.right);
        }
    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        System.out.println("Enter no of elements: ");
        int n = s.nextInt();
        
        int[] a = new int[n];
        System.out.println("enter elements: ");
        for (int i = 0; i < n; i++) {
            a[i] = s.nextInt();
        }
        System.out.println("Enter position: ");
        int p = s.nextInt();
        K = n - p + 1;
        Tnode root = null;
        for (int i : a) {
            root = InsertNode(root, i);
        }
        Inorder(root);
        s.close();
    }

}
