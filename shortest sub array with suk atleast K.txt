import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

class ShortestSubarray {
    public int shortestSubarray(int[] A, int K) {
        int N = A.length;
        long[] P = new long[N + 1];
        for (int i = 0; i < N; ++i) {
            P[i + 1] = P[i] + A[i];
        }
        
        int ans = N + 1;
        Deque<Integer> monoq = new LinkedList<>();
        for (int y = 0; y < P.length; ++y) {
            while (!monoq.isEmpty() && P[y] <= P[monoq.getLast()]) {
                monoq.removeLast();
            }
            while (!monoq.isEmpty() && P[y] >= P[monoq.getFirst()] + K) {
                ans = Math.min(ans, y - monoq.removeFirst());
            }
            monoq.addLast(y);
        }
        return ans < N + 1 ? ans : -1;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        sc.close();
        System.out.println(new ShortestSubarray().shortestSubarray(arr, k));
    }
}
